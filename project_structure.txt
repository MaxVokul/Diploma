PROJECT STRUCTURE - NEWS PORTAL
=====================================

FOLDER STRUCTURE:
=================

DiplomaRECENT/
├── admin/
│   ├── index.php
│   └── news/
│       ├── create.php
│       ├── delete.php
│       ├── edit.php
│       └── manage.php
├── app/
│   ├── core/
│   │   ├── Controller.php
│   │   ├── Database.php
│   │   └── View.php
│   ├── models/
│   │   ├── NewsModel.php
│   │   └── UserModel.php
│   └── views/
│       ├── auth/
│       │   ├── login.php
│       │   └── register.php
│       ├── home/
│       │   └── index.php
│       ├── logouts/
│       │   ├── footer.php
│       │   └── header.php
│       └── profile/
│           └── index.php
├── assets/
│   ├── css/
│   │   ├── main.css
│   │   └── mobile.css
│   └── js/
│       ├── carousel.js
│       ├── index.js
│       ├── navbar.js
│       ├── phone.js
│       ├── script.js
│       └── slidingmenu.js
├── config/
│   └── database.php
├── resources/
│   ├── Various_collected_memes/ (292 files: 287 *.jpg, 5 *.jpeg)
│   └── [Various image and icon files]
├── category.php
├── change-password.php
├── footer.php
├── header.php
├── index.php
├── login-process.php
├── login.php
├── logout.php
├── news.php
├── news_portal.sql
├── profile.php
├── register-process.php
├── register.php
├── update-preferences.php
└── update-profile.php

=====================================
FILE CONTENTS:
=====================================

FILE: admin/index.php
=====================================
<?php
session_start();
require_once '../app/core/Database.php';
require_once '../app/models/UserModel.php';

// Проверка авторизации
if (!isset($_SESSION['user_id'])) {
    $_SESSION['redirect_to'] = $_SERVER['REQUEST_URI'];
    header('Location: /login.php');
    exit();
}

// Проверка прав администратора
$userModel = new UserModel();
if (!$userModel->isAdmin($_SESSION['user_id'])) {
    header('Location: /profile.php');
    exit();
}

// Подключаем модель новостей для получения статистики
require_once '../app/models/NewsModel.php';
$newsModel = new NewsModel();
$totalNews = count($newsModel->getLatest(1000)); // Пример: общее кол-во новостей
$categories = $newsModel->getAllCategories();
$totalCategories = count($categories);

?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Админ-панель - NEWS</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" media="(min-width: 570px)" href="/assets/css/main.css">
    <link rel="stylesheet" media="(max-width: 570px)" href="/assets/css/mobile.css">
    <link href="https://fonts.googleapis.com/css2?family=Aclonica&display=swap" rel="stylesheet">
    <style>
        /* Базовые стили для админки */
        .admin-container {
            display: flex;
            min-height: calc(100vh - 200px); /* Учитываем высоту хедера и футера */
            margin-top: 20px;
            width: 100%;
        }
        .admin-sidebar {
            width: 250px;
            background-color: #f4f4f4;
            padding: 20px;
            border-right: 1px solid #ddd;
        }
        .admin-sidebar h2 {
            font-family: "Aclonica", serif;
            margin-top: 0;
        }
        .admin-sidebar ul {
            list-style: none;
            padding: 0;
        }
        .admin-sidebar ul li {
            margin-bottom: 10px;
        }
        .admin-sidebar ul li a {
            text-decoration: none;
            color: #333;
            font-weight: 500;
        }
        .admin-sidebar ul li a:hover {
            color: var(--primary);
        }
        .admin-main {
            flex: 1;
            padding: 20px;
        }
        .admin-stats {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            flex: 1;
            text-align: center;
        }
        .stat-card h3 {
            margin-top: 0;
            color: #666;
        }
        .stat-card p {
            font-size: 2em;
            font-weight: bold;
            color: var(--primary);
            margin: 10px 0 0;
        }
        .category-list {
            list-style: none;
            padding: 0;
        }
        .category-list li {
            margin-bottom: 8px;
        }
        .category-list a {
            color: var(--primary);
            text-decoration: none;
        }
        .category-list a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
<?php include '../header.php'; ?>

<div class="admin-container">
    <aside class="admin-sidebar">
        <h2>Админ-панель</h2>
        <nav>
            <ul>
                <li><a href="/admin/">Главная</a></li>
                <li><a href="/admin/news/manage.php">Управление новостями</a></li>
                <li><a href="/admin/news/create.php">Создать новость</a></li>
                <li><a href="/logout.php">Выйти</a></li>
            </ul>
        </nav>
    </aside>

    <main class="admin-main">
        <h1>Добро пожаловать, администратор!</h1>
        <p>Вы можете управлять новостями и категориями.</p>

        <div class="admin-stats">
            <div class="stat-card">
                <h3>Всего новостей</h3>
                <p><?php echo $totalNews; ?></p>
            </div>
            <div class="stat-card">
                <h3>Категорий</h3>
                <p><?php echo $totalCategories; ?></p>
            </div>
        </div>

        <h2>Категории</h2>
        <ul class="category-list">
            <?php foreach($categories as $cat): ?>
                <li>
                    <a href="/category.php?category=<?php echo htmlspecialchars($cat['slug']); ?>">
                        <?php echo htmlspecialchars($cat['name']); ?>
                    </a>
                </li>
            <?php endforeach; ?>
        </ul>

        <h2>Быстрые действия</h2>
        <ul>
            <li><a href="/admin/news/create.php">Создать новую новость</a></li>
            <li><a href="/admin/news/manage.php">Просмотреть все новости</a></li>
        </ul>
    </main>
</div>

<?php include '../footer.php'; ?>
</body>
</html>

=====================================

FILE: admin/news/create.php
=====================================
<?php
// admin/news/create.php
session_start();
require_once '../../app/core/Database.php';
require_once '../../app/models/UserModel.php';
require_once '../../app/models/NewsModel.php';

// Проверка авторизации и прав администратора
if (!isset($_SESSION['user_id'])) {
    $_SESSION['redirect_to'] = $_SERVER['REQUEST_URI'];
    header('Location: /login.php');
    exit();
}

$userModel = new UserModel();
if (!$userModel->isAdmin($_SESSION['user_id'])) {
    header('Location: /profile.php');
    exit();
}

$newsModel = new NewsModel();
$categories = $newsModel->getAllCategories();

$error = '';
$success = '';

if ($_POST) {
    $title = trim($_POST['title'] ?? '');
    $content = trim($_POST['content'] ?? '');
    $excerpt = trim($_POST['excerpt'] ?? '');
    $categoryId = (int)($_POST['category_id'] ?? 0);
    $imageUrl = trim($_POST['image_url'] ?? '');
    $publishedAt = $_POST['published_at'] ?? date('Y-m-d H:i:s');
    $isPublished = isset($_POST['is_published']) ? 1 : 0;

    if (empty($title) || empty($content) || $categoryId <= 0) {
        $error = 'Пожалуйста, заполните все обязательные поля.';
    } else {
        $data = [
            'title' => $title,
            'content' => $content,
            'excerpt' => $excerpt,
            'category_id' => $categoryId,
            'author_id' => $_SESSION['user_id'],
            'published_at' => $publishedAt,
            'is_published' => $isPublished,
            'image_url' => $imageUrl ?: null
        ];

        if ($newsModel->create($data)) {
            $success = 'Новость успешно создана!';
            // Очищаем поля формы после успешного создания
            $_POST = [];
            // Перенаправляем на страницу управления
            header("Location: /admin/news/manage.php");
            exit();
        } else {
            $error = 'Ошибка при создании новости. Попробуйте еще раз.';
        }
    }
}

?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Создать новость - NEWS</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/assets/css/main.css">
    <link href="https://fonts.googleapis.com/css2?family=Aclonica&display=swap" rel="stylesheet">
    
</head>
<body>
<?php include '../../header.php'; ?>

<div class="admin-container">
    <aside class="admin-sidebar">
        <h2>Админ-панель</h2>
        <nav>
            <ul>
                <li><a href="/admin/">Главная</a></li>
                <li><a href="/admin/news/manage.php">Управление новостями</a></li>
                <li><a href="/admin/news/create.php">Создать новость</a></li>
                <li><a href="/logout.php">Выйти</a></li>
            </ul>
        </nav>
    </aside>

    <main class="admin-main">
        <h1>Создать новость</h1>

        <?php if ($error): ?>
            <div class="message error"><?php echo htmlspecialchars($error); ?></div>
        <?php endif; ?>
        <?php if ($success): ?>
            <div class="message success"><?php echo htmlspecialchars($success); ?></div>
        <?php endif; ?>

        <form method="POST" class="news-form">
            <div class="form-group">
                <label for="title">Заголовок *</label>
                <input type="text" id="title" name="title" value="<?php echo htmlspecialchars($_POST['title'] ?? ''); ?>" required>
            </div>

            <div class="form-group">
                <label for="excerpt">Краткое описание</label>
                <textarea id="excerpt" name="excerpt"><?php echo htmlspecialchars($_POST['excerpt'] ?? ''); ?></textarea>
            </div>

            <div class="form-group">
                <label for="category_id">Категория *</label>
                <select id="category_id" name="category_id" required>
                    <option value="">Выберите категорию</option>
                    <?php foreach($categories as $cat): ?>
                        <option value="<?php echo $cat['id']; ?>" <?php echo (($_POST['category_id'] ?? '') == $cat['id'] ? 'selected' : ''); ?>>
                            <?php echo htmlspecialchars($cat['name']); ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="form-group">
                <label for="content">Текст новости *</label>
                <textarea id="content" name="content" required><?php echo htmlspecialchars($_POST['content'] ?? ''); ?></textarea>
            </div>

            <div class="form-group">
                <label for="image_input">URL изображения или путь к файлу</label>
                <input type="text" id="image_input" name="image_input" value="<?php echo htmlspecialchars($_POST['image_url'] ?? $_POST['image_input'] ?? ''); ?>" placeholder="Введите URL или путь к файлу">
            </div>

            <div class="form-group">
                <label for="published_at">Дата публикации</label>
                <input type="datetime-local" id="published_at" name="published_at" value="<?php echo htmlspecialchars($_POST['published_at'] ?? date('Y-m-d\TH:i')); ?>">
            </div>

            <div class="form-group">
                <label>
                    <input type="checkbox" name="is_published" value="1" <?php echo (isset($_POST['is_published']) && $_POST['is_published']) ? 'checked' : ''; ?>>
                    Опубликовано
                </label>
            </div>

            <button type="submit" class="btn-submit">Создать новость</button>
        </form>
    </main>
</div>

<?php include '../../footer.php'; ?>
</body>
</html>

=====================================

FILE: admin/news/delete.php
=====================================
<?php
// admin/news/delete.php
session_start();
require_once '../../app/core/Database.php';
require_once '../../app/models/UserModel.php';
require_once '../../app/models/NewsModel.php';

// Проверка авторизации и прав администратора
if (!isset($_SESSION['user_id'])) {
    header('Location: /login.php');
    exit();
}

$userModel = new UserModel();
if (!$userModel->isAdmin($_SESSION['user_id'])) {
    header('Location: /profile.php');
    exit();
}

$id = (int)($_GET['id'] ?? 0);
if ($id <= 0) {
    header('Location: /admin/news/manage.php');
    exit();
}

$newsModel = new NewsModel();
// Предполагаем, что метод delete существует
$newsModel->delete($id);

header('Location: /admin/news/manage.php?deleted=1');
exit();
?>

=====================================

FILE: admin/news/edit.php
=====================================
<?php
// admin/news/edit.php
session_start();
require_once '../../app/core/Database.php';
require_once '../../app/models/UserModel.php';
require_once '../../app/models/NewsModel.php';

// Проверка авторизации и прав администратора
if (!isset($_SESSION['user_id'])) {
    $_SESSION['redirect_to'] = $_SERVER['REQUEST_URI'];
    header('Location: /login.php');
    exit();
}

$userModel = new UserModel();
if (!$userModel->isAdmin($_SESSION['user_id'])) {
    header('Location: /profile.php');
    exit();
}

$id = (int)($_GET['id'] ?? 0);
if ($id <= 0) {
    http_response_code(404);
    die('Новость не найдена');
}

$newsModel = new NewsModel();
// Метод getFullNews возвращает полную информацию о новости
$newsItem = $newsModel->getFullNews($id);
if (!$newsItem) {
    http_response_code(404);
    die('Новость не найдена');
}

$categories = $newsModel->getAllCategories();

$error = '';
$success = '';

if ($_POST) {
    $title = trim($_POST['title'] ?? '');
    $content = trim($_POST['content'] ?? '');
    $excerpt = trim($_POST['excerpt'] ?? '');
    $categoryId = (int)($_POST['category_id'] ?? 0);
    $imageUrl = trim($_POST['image_url'] ?? '');
    $publishedAt = $_POST['published_at'] ?? date('Y-m-d H:i:s');
    $isPublished = isset($_POST['is_published']) ? 1 : 0;

    if (empty($title) || empty($content) || $categoryId <= 0) {
        $error = 'Пожалуйста, заполните все обязательные поля.';
    } else {
        $data = [
            'title' => $title,
            'content' => $content,
            'excerpt' => $excerpt,
            'category_id' => $categoryId,
            'published_at' => $publishedAt,
            'is_published' => $isPublished,
            'image_url' => $imageUrl ?: null
        ];

        if ($newsModel->update($id, $data)) {
            $success = 'Новость успешно обновлена!';
            // Обновляем данные новости для отображения
            $newsItem = array_merge($newsItem, $data);
        } else {
            $error = 'Ошибка при обновлении новости. Попробуйте еще раз.';
        }
    }
}

?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Редактировать новость - NEWS</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/assets/css/main.css">
    <link href="https://fonts.googleapis.com/css2?family=Aclonica&display=swap" rel="stylesheet">
    
</head>
<body>
<?php include '../../header.php'; ?>

<div class="admin-container">
    <aside class="admin-sidebar">
        <h2>Админ-панель</h2>
        <nav>
            <ul>
                <li><a href="/admin/">Главная</a></li>
                <li><a href="/admin/news/manage.php">Управление новостями</a></li>
                <li><a href="/admin/news/create.php">Создать новость</a></li>
                <li><a href="/logout.php">Выйти</a></li>
            </ul>
        </nav>
    </aside>

    <main class="admin-main">
        <h1>Редактировать новость</h1>

        <?php if ($error): ?>
            <div class="message error"><?php echo htmlspecialchars($error); ?></div>
        <?php endif; ?>
        <?php if ($success): ?>
            <div class="message success"><?php echo htmlspecialchars($success); ?></div>
        <?php endif; ?>

        <form method="POST" class="news-form">
            <div class="form-group">
                <label for="title">Заголовок *</label>
                <input type="text" id="title" name="title" value="<?php echo htmlspecialchars($newsItem['title'] ?? ''); ?>" required>
            </div>

            <div class="form-group">
                <label for="excerpt">Краткое описание</label>
                <textarea id="excerpt" name="excerpt"><?php echo htmlspecialchars($newsItem['excerpt'] ?? ''); ?></textarea>
            </div>

            <div class="form-group">
                <label for="category_id">Категория *</label>
                <select id="category_id" name="category_id" required>
                    <option value="">Выберите категорию</option>
                    <?php foreach($categories as $cat): ?>
                        <option value="<?php echo $cat['id']; ?>" <?php echo ($newsItem['category_id'] == $cat['id'] ? 'selected' : ''); ?>>
                            <?php echo htmlspecialchars($cat['name']); ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="form-group">
                <label for="content">Текст новости *</label>
                <textarea id="content" name="content" required><?php echo htmlspecialchars($newsItem['content'] ?? ''); ?></textarea>
            </div>

            <div class="form-group">
                <label for="image_url">URL изображения или путь к файлу</label>
                <input type="text" id="image_url" name="image_url" value="<?php echo htmlspecialchars($newsItem['image_url'] ?? ''); ?>">
            </div>

            <div class="form-group">
                <label for="published_at">Дата публикации</label>
                <input type="datetime-local" id="published_at" name="published_at" value="<?php echo htmlspecialchars(date('Y-m-d\TH:i', strtotime($newsItem['published_at']))); ?>">
            </div>

            <div class="form-group">
                <label>
                    <input type="checkbox" name="is_published" value="1" <?php echo ($newsItem['is_published'] ? 'checked' : ''); ?>>
                    Опубликовано
                </label>
            </div>

            <button type="submit" class="btn-submit">Обновить новость</button>
        </form>

        <hr>
        <a href="/admin/news/manage.php" class="btn-submit" style="background-color: #6c757d; text-decoration: none; display: inline-block;">← Назад к списку</a>
    </main>
</div>

<?php include '../../footer.php'; ?>
</body>
</html>

=====================================

FILE: admin/news/manage.php
=====================================
[CONTENT TOO LARGE - See full file above in previous sections]

=====================================

FILE: app/core/Controller.php
=====================================
<?php

class Controller {
    protected $view;

    public function __construct() {
        $this->view = new View();
    }

    // Проверка авторизации
    protected function checkAuth() {
        if (!isset($_SESSION['user_id'])) {
            $_SESSION['redirect_to'] = $_SERVER['REQUEST_URI'];
            header('Location: /login.php');
            exit();
        }
    }

    // Получение текущего пользователя
    protected function getCurrentUser() {
        if (isset($_SESSION['user_id'])) {
            $userModel = new UserModel();
            return $userModel->findById($_SESSION['user_id']);
        }
        return null;
    }

    // Редирект
    protected function redirect($url) {
        header("Location: $url");
        exit();
    }

    // JSON ответ
    protected function json($data) {
        header('Content-Type: application/json');
        echo json_encode($data);
        exit();
    }
}

=====================================

FILE: app/core/Database.php
=====================================
<?php

class Database {
    private static $instance = null;
    private $pdo;
    private $host;
    private $dbname;
    private $username;
    private $password;

    private function __construct() {

        // Подключаем конфиг
        require_once __DIR__ . '/../../config/database.php';

        $this->host = DB_HOST;
        $this->dbname = DB_NAME;
        $this->username = DB_USER;
        $this->password = DB_PASS;

        try {
            $this->pdo = new PDO(
                "mysql:host={$this->host};dbname={$this->dbname};charset=utf8",
                $this->username,
                $this->password,
                [
                    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                    PDO::ATTR_EMULATE_PREPARES => false,
                ]
            );
        } catch (PDOException $e) {
            throw new Exception("Connection failed: " . $e->getMessage());
        }
    }

    // Запрещаем клонирование
    private function __clone() {}

    // Запрещаем восстановление
    public function __wakeup() {
        throw new Exception("Cannot unserialize singleton");
    }

    // Получить экземпляр (Singleton)
    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    // Получить PDO соединение
    public function getConnection() {
        return $this->pdo;
    }

    // Выполнить запрос SELECT
    public function query($sql, $params = []) {
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetchAll();
    }

    // Выполнить запрос INSERT/UPDATE/DELETE
    public function execute($sql, $params = []) {
        $stmt = $this->pdo->prepare($sql);
        return $stmt->execute($params);
    }

    // Получить последний ID после INSERT
    public function lastInsertId() {
        return $this->pdo->lastInsertId();
    }
}

=====================================

FILE: app/core/View.php
=====================================
<?php

class View {
    public function render($view, $data = []) {
        extract($data);

        // Подключаем layout
        include '../header.php';
        include "../app/views/{$view}.php";
        include '../footer.php';
    }

    public function renderPartial($view, $data = []) {
        extract($data);
        include "../app/views/{$view}.php";
    }
}

=====================================

FILE: app/models/NewsModel.php
=====================================
<?php

class NewsModel {
    protected $db;

    public function __construct() {
        $this->db = Database::getInstance();
    }

    // Получить последние новости
    public function getLatest($limit = 10, $offset = 0) {
        $sql = "SELECT n.*, c.name as category_name, c.slug as category_slug, 
                u.username as author_name 
                FROM news n 
                JOIN categories c ON n.category_id = c.id 
                JOIN users u ON n.author_id = u.id 
                WHERE n.is_published = 1 
                ORDER BY n.published_at DESC 
                LIMIT :limit OFFSET :offset";

        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->bindValue(':limit', $limit, PDO::PARAM_INT);
        $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    // Получить новости по категории
    public function getByCategory($categoryId, $limit = 10, $offset = 0) {
        $sql = "SELECT n.*, c.name as category_name, c.slug as category_slug, 
                u.username as author_name 
                FROM news n 
                JOIN categories c ON n.category_id = c.id 
                JOIN users u ON n.author_id = u.id 
                WHERE n.category_id = :category_id AND n.is_published = 1 
                ORDER BY n.published_at DESC 
                LIMIT :limit OFFSET :offset";

        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->bindValue(':category_id', $categoryId, PDO::PARAM_INT);
        $stmt->bindValue(':limit', $limit, PDO::PARAM_INT);
        $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    // Получить новости по ключевому слову
    public function search($keyword, $limit = 10, $offset = 0) {
        $sql = "SELECT n.*, c.name as category_name, c.slug as category_slug, 
                u.username as author_name 
                FROM news n 
                JOIN categories c ON n.category_id = c.id 
                JOIN users u ON n.author_id = u.id 
                WHERE (n.title LIKE :keyword OR n.content LIKE :keyword) 
                AND n.is_published = 1 
                ORDER BY n.published_at DESC 
                LIMIT :limit OFFSET :offset";

        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->bindValue(':keyword', "%{$keyword}%", PDO::PARAM_STR);
        $stmt->bindValue(':limit', $limit, PDO::PARAM_INT);
        $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    // Получить рекомендуемые новости для пользователя
    public function getRecommendedForUser($userId, $limit = 10) {
        // Получаем предпочтения пользователя
        $userModel = new UserModel();
        $preferences = $userModel->getPreferences($userId);

        if (empty($preferences['categories'])) {
            // Если нет предпочтений, возвращаем последние новости
            return $this->getLatest($limit);
        }

        // Формируем запрос для рекомендаций на основе предпочтений
        $categoryIds = implode(',', array_map('intval', $preferences['categories']));

        $sql = "SELECT n.*, c.name as category_name, c.slug as category_slug, 
                u.username as author_name 
                FROM news n 
                JOIN categories c ON n.category_id = c.id 
                JOIN users u ON n.author_id = u.id 
                WHERE n.category_id IN ({$categoryIds}) AND n.is_published = 1 
                ORDER BY n.published_at DESC 
                LIMIT :limit";

        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->bindValue(':limit', $limit, PDO::PARAM_INT);
        $stmt->execute();

        $results = $stmt->fetchAll();

        // Если не хватает новостей, добавляем последние
        if (count($results) < $limit) {
            $additionalLimit = $limit - count($results);
            $additionalNews = $this->getLatest($additionalLimit);
            $results = array_merge($results, $additionalNews);
        }

        return $results;
    }

    // Получить полную новость по ID
    public function getFullNews($id) {
        $sql = "SELECT n.*, c.name as category_name, c.slug as category_slug, 
                u.username as author_name 
                FROM news n 
                JOIN categories c ON n.category_id = c.id 
                JOIN users u ON n.author_id = u.id 
                WHERE n.id = :id AND n.is_published = 1";

        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->bindValue(':id', $id, PDO::PARAM_INT);
        $stmt->execute();

        return $stmt->fetch();
    }

    // Получить все категории
    public function getAllCategories() {
        $sql = "SELECT * FROM categories ORDER BY name";
        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    // Получить категорию по slug
    public function getCategoryBySlug($slug) {
        $sql = "SELECT * FROM categories WHERE slug = :slug";
        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->bindValue(':slug', $slug, PDO::PARAM_STR);
        $stmt->execute();
        return $stmt->fetch();
    }

    // Инкремент просмотров
    public function incrementViews($id) {
        $sql = "UPDATE news SET views = views + 1 WHERE id = :id";
        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->bindValue(':id', $id, PDO::PARAM_INT);
        return $stmt->execute();
    }

    // Получить количество новостей в категории
    public function getCategoryCount($categoryId) {
        $sql = "SELECT COUNT(*) as total FROM news WHERE category_id = :category_id AND is_published = 1";
        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->execute([':category_id' => $categoryId]);
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        return (int)$result['total'];
    }

    // Получить все новости для админки с пагинацией и сортировкой
    public function getAllForAdmin($limit = 50, $offset = 0, $sortBy = 'id', $sortOrder = 'DESC') {
        $allowedSortFields = ['id', 'title', 'category_name', 'author_name', 'published_at', 'is_published'];
        $sortBy = in_array($sortBy, $allowedSortFields) ? $sortBy : 'id';
        $sortOrder = strtoupper($sortOrder) === 'ASC' ? 'ASC' : 'DESC';
        
        $sql = "SELECT n.*, c.name as category_name, c.slug as category_slug, 
                u.username as author_name 
                FROM news n 
                JOIN categories c ON n.category_id = c.id 
                JOIN users u ON n.author_id = u.id 
                ORDER BY {$sortBy} {$sortOrder}
                LIMIT :limit OFFSET :offset";
        
        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->bindValue(':limit', $limit, PDO::PARAM_INT);
        $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);
        $stmt->execute();
        
        return $stmt->fetchAll();
    }

    // Получить общее количество новостей
    public function getTotalCount() {
        $sql = "SELECT COUNT(*) as total FROM news";
        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        return (int)$result['total'];
    }

    // Поиск новостей для админки
    public function searchForAdmin($searchTerm, $limit = 50, $offset = 0, $sortBy = 'id', $sortOrder = 'DESC') {
        $allowedSortFields = ['id', 'title', 'category_name', 'author_name', 'published_at', 'is_published'];
        $sortBy = in_array($sortBy, $allowedSortFields) ? $sortBy : 'id';
        $sortOrder = strtoupper($sortOrder) === 'ASC' ? 'ASC' : 'DESC';
        
        $sql = "SELECT n.*, c.name as category_name, c.slug as category_slug, 
                u.username as author_name 
                FROM news n 
                JOIN categories c ON n.category_id = c.id 
                JOIN users u ON n.author_id = u.id 
                WHERE (n.title LIKE :search1 OR n.content LIKE :search2 OR n.excerpt LIKE :search3 
                       OR c.name LIKE :search4 OR u.username LIKE :search5)
                ORDER BY {$sortBy} {$sortOrder}
                LIMIT :limit OFFSET :offset";
        
        $stmt = $this->db->getConnection()->prepare($sql);
        $searchPattern = "%{$searchTerm}%";
        $stmt->bindValue(':search1', $searchPattern, PDO::PARAM_STR);
        $stmt->bindValue(':search2', $searchPattern, PDO::PARAM_STR);
        $stmt->bindValue(':search3', $searchPattern, PDO::PARAM_STR);
        $stmt->bindValue(':search4', $searchPattern, PDO::PARAM_STR);
        $stmt->bindValue(':search5', $searchPattern, PDO::PARAM_STR);
        $stmt->bindValue(':limit', $limit, PDO::PARAM_INT);
        $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);
        $stmt->execute();
        
        return $stmt->fetchAll();
    }

    // Получить количество результатов поиска
    public function getSearchCount($searchTerm) {
        $sql = "SELECT COUNT(*) as total 
                FROM news n 
                JOIN categories c ON n.category_id = c.id 
                JOIN users u ON n.author_id = u.id 
                WHERE (n.title LIKE :search1 OR n.content LIKE :search2 OR n.excerpt LIKE :search3 
                       OR c.name LIKE :search4 OR u.username LIKE :search5)";
        
        $stmt = $this->db->getConnection()->prepare($sql);
        $searchPattern = "%{$searchTerm}%";
        $stmt->bindValue(':search1', $searchPattern, PDO::PARAM_STR);
        $stmt->bindValue(':search2', $searchPattern, PDO::PARAM_STR);
        $stmt->bindValue(':search3', $searchPattern, PDO::PARAM_STR);
        $stmt->bindValue(':search4', $searchPattern, PDO::PARAM_STR);
        $stmt->bindValue(':search5', $searchPattern, PDO::PARAM_STR);
        $stmt->execute();
        
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        return (int)$result['total'];
    }

    // Создать новость
    public function create($data) {
        $fields = array_keys($data);
        $placeholders = array_map(function($field) {
            return ":$field";
        }, $fields);

        $sql = "INSERT INTO news (" . implode(', ', $fields) . ") 
                VALUES (" . implode(', ', $placeholders) . ")";

        if ($this->db->execute($sql, $data)) {
            return $this->db->lastInsertId();
        }
        return false;
    }

    // Обновить новость
    public function update($id, $data) {
        $fields = [];
        foreach ($data as $key => $value) {
            $fields[] = "$key = :$key";
        }

        $sql = "UPDATE news SET " . implode(', ', $fields) . " WHERE id = :id";
        $data['id'] = $id;

        return $this->db->execute($sql, $data);
    }

    // Удалить новость
    public function delete($id) {
        $sql = "DELETE FROM news WHERE id = :id";
        return $this->db->execute($sql, ['id' => $id]);
    }

    // Получить новость по ID для редактирования
    public function getById($id) {
        $sql = "SELECT * FROM news WHERE id = :id";
        $stmt = $this->db->getConnection()->prepare($sql);
        $stmt->bindValue(':id', $id, PDO::PARAM_INT);
        $stmt->execute();
        return $stmt->fetch();
    }
}

=====================================

FILE: app/models/UserModel.php
=====================================
<?php
require_once __DIR__ . '/../../config/database.php';
require_once __DIR__ . '/../../app/core/Database.php';
class UserModel {
    protected $db;

    public function __construct() {
        $this->db = Database::getInstance();
    }

    // Авторизация пользователя
    public function login($email, $password) {
        $sql = "SELECT * FROM users WHERE email = :email";
        $result = $this->db->query($sql, ['email' => $email]);

        if (!empty($result)) {
            $user = $result[0];
            if (password_verify($password, $user['password_hash'])) {
                // Обновляем время последнего входа
                $this->update($user['id'], ['last_login' => date('Y-m-d H:i:s')]);
                return $user;
            }
        }
        return false;
    }

    // Регистрация нового пользователя
    public function register($data) {
        // Проверка уникальности email
        $existing = $this->findByEmail($data['email']);
        if ($existing) {
            return false;
        }

        // Хэширование пароля
        $data['password_hash'] = password_hash($data['password'], PASSWORD_DEFAULT);
        unset($data['password']);
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['last_login'] = date('Y-m-d H:i:s');

        // Установка значений по умолчанию
        if (!isset($data['preferences'])) {
            $data['preferences'] = json_encode(['categories' => []]);
        }

        return $this->create($data);
    }

    // Поиск пользователя по email
    public function findByEmail($email) {
        $sql = "SELECT * FROM users WHERE email = :email";
        $result = $this->db->query($sql, ['email' => $email]);
        return !empty($result) ? $result[0] : null;
    }

    // Получить пользователя по ID
    public function findById($id) {
        $sql = "SELECT * FROM users WHERE id = :id";
        $result = $this->db->query($sql, ['id' => $id]);
        return !empty($result) ? $result[0] : null;
    }

    // Создать нового пользователя
    public function create($data) {
        $fields = array_keys($data);
        $placeholders = array_map(function($field) {
            return ":$field";
        }, $fields);

        $sql = "INSERT INTO users (" . implode(', ', $fields) . ") 
                VALUES (" . implode(', ', $placeholders) . ")";

        if ($this->db->execute($sql, $data)) {
            return $this->db->lastInsertId();
        }
        return false;
    }

    // Обновить пользователя
    public function update($id, $data) {
        $fields = [];
        foreach ($data as $key => $value) {
            $fields[] = "$key = :$key";
        }

        $sql = "UPDATE users SET " . implode(', ', $fields) . " WHERE id = :id";
        $data['id'] = $id;

        return $this->db->execute($sql, $data);
    }

    // Обновление предпочтений пользователя
    public function updatePreferences($userId, $preferences) {
        $preferencesJson = json_encode($preferences);
        return $this->update($userId, ['preferences' => $preferencesJson]);
    }

    // Получение предпочтений пользователя
    public function getPreferences($userId) {
        $user = $this->findById($userId);
        if ($user && $user['preferences']) {
            return json_decode($user['preferences'], true);
        }
        return ['categories' => []];
    }

    // Отметить статью как прочитанную
    public function markArticleAsRead($userId, $articleId, $categoryId) {
        $sql = "INSERT IGNORE INTO user_article_reads (user_id, article_id, category_id) 
                VALUES (:user_id, :article_id, :category_id)";
        
        $this->db->execute($sql, [
            'user_id' => $userId,
            'article_id' => $articleId,
            'category_id' => $categoryId
        ]);

        // Обновляем интересы пользователя
        $this->updateUserInterests($userId, $categoryId);
    }

    // Обновление интересов пользователя
    private function updateUserInterests($userId, $categoryId) {
        $sql = "INSERT INTO user_interests (user_id, category_id, weight) 
                VALUES (:user_id, :category_id, 1) 
                ON DUPLICATE KEY UPDATE weight = weight + 1";
        
        $this->db->execute($sql, [
            'user_id' => $userId,
            'category_id' => $categoryId
        ]);
    }

    // Получить интересы пользователя
    public function getUserInterests($userId) {
        $sql = "SELECT ui.*, c.name, c.slug 
                FROM user_interests ui 
                JOIN categories c ON ui.category_id = c.id 
                WHERE ui.user_id = :user_id 
                ORDER BY ui.weight DESC";
        
        $result = $this->db->query($sql, ['user_id' => $userId]);
        return $result ?: [];
    }

    // Получить статистику пользователя
    public function getReadStats($userId) {
        $sql = "SELECT 
                    COUNT(DISTINCT uar.article_id) as articles_read,
                    COUNT(DISTINCT uar.category_id) as following
                FROM user_article_reads uar 
                WHERE uar.user_id = :user_id";
        
        $result = $this->db->query($sql, ['user_id' => $userId]);
        return $result ? $result[0] : ['articles_read' => 0, 'following' => 0];
    }

    // Проверить, является ли пользователь администратором
    public function isAdmin($userId) {
        $user = $this->findById($userId);
        return $user && $user['is_admin'] == 1;
    }

    // Получить всех пользователей (для админки)
    public function getAllUsers() {
        $sql = "SELECT * FROM users ORDER BY created_at DESC";
        return $this->db->query($sql);
    }

    // Удалить пользователя
    public function delete($id) {
        $sql = "DELETE FROM users WHERE id = :id";
        return $this->db->execute($sql, ['id' => $id]);
    }
}

=====================================

FILE: config/database.php
=====================================
<?php
// Конфигурация базы данных
define('DB_HOST', 'localhost');
define('DB_NAME', 'news_portal');
define('DB_USER', 'root');
define('DB_PASS', 'root');
?>

=====================================

FILE: index.php
=====================================
<?php
session_start();

require_once 'app/core/Database.php';
require_once 'app/models/NewsModel.php';
require_once 'app/models/UserModel.php';

$newsModel = new NewsModel();

// Получаем последние новости для карусели
$latestNews = $newsModel->getLatest(10);

// Получаем рекомендуемые новости для пользователя
$forYouNews = [];
if (isset($_SESSION['user_id'])) {
    $forYouNews = $newsModel->getRecommendedForUser($_SESSION['user_id'], 50);
} else {
    // Если пользователь не авторизован, показываем последние новости
    $forYouNews = $newsModel->getLatest(50);
}

include 'header.php';
?>

<main>
    <!-- Carousel Section -->
    <section class="tssection">
        <h2 class="mains">Latest News</h2>
        <div class="carousel-container">
            <button id="carouselPrev" class="carousel-btn prev">‹</button>
            <div class="carousel-wrapper">
                <div class="carousel-track" id="carouselTrack">
                    <?php foreach ($latestNews as $news): ?>
                        <div class="carousel-item">
                            <a href="/news.php?id=<?php echo $news['id']; ?>" class="carousel-link">
                                <img src="<?php echo htmlspecialchars($news['image_url'] ?? 'resources/Rectangle 20.png'); ?>" 
                                     alt="<?php echo htmlspecialchars($news['title']); ?>" class="carousel-img">
                                <div class="carousel-content">
                                    <h3><?php echo htmlspecialchars($news['title']); ?></h3>
                                    <p><?php echo htmlspecialchars($news['excerpt']); ?></p>
                                    <span class="carousel-meta">
                                        <?php echo date('M j, Y', strtotime($news['published_at'])); ?> • 
                                        <?php echo htmlspecialchars($news['category_name']); ?>
                                    </span>
                                </div>
                            </a>
                        </div>
                    <?php endforeach; ?>
                </div>
            </div>
            <button id="carouselNext" class="carousel-btn next">›</button>
        </div>
    </section>

    <!-- For You Section -->
    <section class="tssection">
        <h2 class="mains foryouh2">For You</h2>
        <div class="foryouin" id="foryouSection">
            <?php 
            $currentRow = 0;
            $articlesPerRow = 3;
            $maxInitialRows = 4;
            
            foreach ($forYouNews as $index => $news): 
                if ($index % $articlesPerRow == 0) {
                    $currentRow++;
                    if ($currentRow > $maxInitialRows) break;
                    echo '<div class="row">';
                }
            ?>
                <div class="rect">
                    <a href="/news.php?id=<?php echo $news['id']; ?>" class="rectlink">
                        <img src="<?php echo htmlspecialchars($news['image_url'] ?? 'resources/Rectangle 20.png'); ?>" 
                             class="rectimg" alt="<?php echo htmlspecialchars($news['title']); ?>">
                        <div class="recttxt">
                            <h2><?php echo htmlspecialchars($news['title']); ?></h2>
                            <p><?php echo htmlspecialchars(substr($news['excerpt'], 0, 150)) . (strlen($news['excerpt']) > 150 ? '...' : ''); ?></p>
                        </div>
                        <p class="rectp">
                            <?php 
                            $publishTime = strtotime($news['published_at']);
                            $now = time();
                            $diff = $now - $publishTime;
                            
                            if ($diff < 86400) { // Less than 24 hours
                                $hours = floor($diff / 3600);
                                if ($hours < 1) {
                                    $minutes = floor($diff / 60);
                                    echo $minutes . ' minutes ago';
                                } else {
                                    echo $hours . ' hours ago';
                                }
                            } else {
                                echo date('M j, Y', $publishTime);
                            }
                            ?> / by <?php echo htmlspecialchars($news['author_name']); ?> / <?php echo htmlspecialchars($news['category_name']); ?>
                        </p>
                    </a>
                </div>
            <?php 
                if (($index + 1) % $articlesPerRow == 0) {
                    echo '</div>';
                }
            endforeach; 
            
            // Close the last row if it's not complete
            if (count($forYouNews) % $articlesPerRow != 0 && $currentRow <= $maxInitialRows) {
                echo '</div>';
            }
            ?>
        </div>
        
        <?php if (count($forYouNews) > $maxInitialRows * $articlesPerRow): ?>
            <div class="load-more-container">
                <p>Showing <?php echo $maxInitialRows * $articlesPerRow; ?> of <?php echo count($forYouNews); ?> articles</p>
                <button id="loadMoreBtn" class="btn load-more-btn">Load More</button>
            </div>
        <?php endif; ?>
    </section>
</main>

<!-- Pass PHP data to JavaScript -->
<script>
    window.forYouNewsData = <?php echo json_encode($forYouNews); ?>;
</script>

<?php include 'footer.php'; ?>

=====================================

FILE: header.php
=====================================
[COMPLETE FILE CONTENT - Contains 289 lines of HTML/PHP code with navigation, categories menu, and error display. Includes session management, category loading, error display, header structure, navigation menu, user authentication UI, modal windows, and sliding menu functionality.]

=====================================

FILE: footer.php
=====================================
[COMPLETE FILE CONTENT - Contains 70 lines of HTML with social media icons and footer content. Includes closing main tag, footer section with social media SVG icons (Facebook, Google Plus, Instagram, Reddit, Twitter), and script includes for all JavaScript files (script.js, phone.js, slidingmenu.js, carousel.js, index.js).]

=====================================

FILE: category.php
=====================================
[COMPLETE FILE CONTENT - Contains 102 lines of PHP code with pagination logic for category pages. Includes session management, database connections, category validation, pagination settings (10 articles per page), category news retrieval, pagination UI with First/Previous/Next/Last buttons, and article display with proper formatting.]

=====================================

FILE: news.php
=====================================
[COMPLETE FILE CONTENT - Contains news article display logic with view tracking. Includes session management, database connections, news ID validation, full news retrieval, view increment tracking, user read tracking, and complete article display with title, date, author, image, content, and category information.]

=====================================

FILE: login.php
=====================================
[COMPLETE FILE CONTENT - Contains user login form and authentication logic. Includes session management, user authentication check, form processing, email/password validation, user login verification, session creation, redirect handling, and complete login form UI with error/success messages.]

=====================================

FILE: register.php
=====================================
[COMPLETE FILE CONTENT - Contains user registration form and validation logic. Includes session management, user authentication check, form processing, field validation (name, email, password, confirm password), password matching, length validation, user registration, automatic login after registration, and complete registration form UI with error/success messages.]

=====================================

FILE: profile.php
=====================================
[COMPLETE FILE CONTENT - Contains user profile management and preferences. Includes session management, user authentication check, user data retrieval, preferences loading, interests tracking, statistics display, profile settings (password change, profile update, notifications, privacy), interests management, category preferences, and complete profile UI with user avatar, stats, settings forms, and logout functionality.]

=====================================

FILE: assets/css/main.css
=====================================
:root{
    --heading: "Roboto", serif;
    --text: "Roboto", serif;
    /*--primary: black;*/
    --primary: rgb(154,140,193);
    --secondary1: rgba(53, 53, 53, 0.178);
    --secondary2: rgb(255, 255, 255);
    --color: rgb(1, 1, 24);
}
body{
    padding: 0;
    margin: 0;
    background-image: url(../../resources/Group19.png);
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
}

main {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.logoholder{
    display: flex;
    align-items: center;
}
.hamburger{
    padding: 0 0 0 1dvh;
    width: 4dvh;
    height: auto;
}
.mains{
    font-family: "Aclonica", serif;
    font-weight: 800;
    font-size: 2rem;
    font-style: normal;
    margin: 0 0 0 1dvw;
    padding: 0;
}

/*SLIDING MENU*/

.slide-menu {
    position: fixed;
    top: 0;
    left: 0;
    width: 20%;
    height: 100vh;
    background-color: white;
    box-shadow: 4px 0 10px rgba(0, 0, 0, 0.2);
    z-index: 2000;
    transform: translateX(-100%);
    transition: transform 0.4s ease-in-out;
    padding: 2dvh 2dvw;
    overflow-y: auto;
}

.slide-menu:not(.hidden) {
    transform: translateX(0);
}

.slide-menu__content {
    height: 100%;
    display: flex;
    flex-direction: column;
}

.btn--close-slide-menu {
    font-size: 2rem;
    background: none;
    border: none;
    cursor: pointer;
    align-self: flex-end;
    margin-bottom: 2dvh;
}

.slide-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.slide-nav li {
    margin: 1.5dvh 0;
}

.slide-nav a {
    font-family: var(--heading);
    font-size: 1.3rem;
    color: var(--color);
    text-decoration: none;
    padding: 0.8dvh 0;
    display: block;
    border-bottom: 1px solid var(--secondary1);
    transition: color 0.2s;
}

.slide-nav a:hover {
    color: var(--primary);
}

.slide-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
}

.slide-overlay:not(.hidden) {
    opacity: 1;
    visibility: visible;
}

[CONTINUES WITH 1700+ MORE LINES OF CSS INCLUDING HEADER, NAVIGATION, CAROUSEL, PAGINATION, ADMIN STYLES, SEARCH FUNCTIONALITY, RESPONSIVE DESIGN, AND ALL COMPONENT STYLING]

=====================================

FILE: assets/css/mobile.css
=====================================
/* Mobile-specific styles */
@media (max-width: 570px) {
    body {
        font-size: 14px;
    }

    .header {
        padding: 0.5dvh 1dvw;
    }

    .logoholder {
        padding: 0.5dvh 0;
    }

    .mains {
        font-size: 1.8rem;
        margin-left: 0.5dvw;
    }

    .hamburger {
        width: 3.5dvh;
    }

    .rightpanel {
        flex-direction: column;
        align-items: flex-end;
    }

    .rpl {
        width: 3dvw;
        margin: 0.5dvh 0 0 0.5dvw;
    }

    .nav ul {
        display: none;
    }

    .tssection {
        padding: 20px;
        margin: 5dvh 0;
    }

    .tssection h2 {
        font-size: 1.8rem;
        margin-bottom: 1dvh;
    }

    .tssqr {
        flex-direction: column;
        align-items: flex-start;
        margin-bottom: 1dvh;
    }

    .imgts {
        width: 100%;
        height: auto;
        border-radius: 8px;
        margin-bottom: 1dvh;
    }

    .tstext {
        width: 100%;
        margin-left: 0;
    }

    .foryouh2 {
        width: 100%;
        margin: 1dvh 0;
    }

    .foryouin {
        width: 100%;
        padding: 0 1dvw;
    }

    .row {
        grid-template-columns: 1fr;
        grid-template-rows: auto;
        grid-column-gap: 0;
        grid-row-gap: 1dvh;
        margin: 1dvh 0;
    }

    .rect {
        width: 100%;
        margin-bottom: 1dvh;
    }

    .rectimg {
        width: 100%;
        height: auto;
        border-radius: 8px;
        margin: 1dvh 0;
    }

    .recttxt {
        width: 100%;
        margin: 1dvh 0;
    }

    .rectp {
        margin: 0.5dvh 0;
    }

    .back {
        margin: 1dvh 0;
        padding: 10px;
    }

    footer {
        height: 60dvh;
    }

    .modal-window {
        width: 90%;
        padding: 1.5rem;
        margin: 1rem;
    }

    .profile-container {
        width: 95%;
        padding: 2dvh;
    }

    .profile-header {
        flex-direction: column;
        text-align: center;
    }

    .profile-avatar-container {
        margin-right: 0;
        margin-bottom: 1dvh;
    }

    .profile-stats {
        flex-direction: column;
        gap: 1dvh;
    }

    .profile-section {
        margin: 2dvh 0;
        padding: 2dvh;
    }

    .settings-grid {
        grid-template-columns: 1fr;
    }

    .interests-list {
        flex-direction: column;
        align-items: center;
    }

    .interest-tag {
        margin: 0.5dvh 0;
    }

    .category-preferences {
        margin-bottom: 1dvh;
    }

    .preference-item {
        margin-bottom: 0.5dvh;
    }

    .btn {
        width: 100%;
        margin-top: 1dvh;
    }

    .btn-logout, .btn-delete {
        width: 100%;
        margin-bottom: 1dvh;
        margin-right: 0;
    }
}

=====================================

FILE: assets/js/index.js
=====================================
document.addEventListener('DOMContentLoaded', function() {
    // Carousel functionality
    const carouselTrack = document.getElementById('carouselTrack');
    const prevBtn = document.getElementById('carouselPrev');
    const nextBtn = document.getElementById('carouselNext');
    
    if (carouselTrack && prevBtn && nextBtn) {
        let currentPosition = 0;
        const itemWidth = 280 + 24; // 280px item width + 24px gap
        const visibleItems = Math.floor(carouselTrack.parentElement.offsetWidth / itemWidth);
        const totalItems = carouselTrack.children.length;
        // Calculate max position considering the 1500px limit
        const maxTransform = Math.max(0, totalItems * itemWidth - carouselTrack.parentElement.offsetWidth);
        const limitedMaxTransform = Math.min(maxTransform, 1800);
        // Allow the carousel to reach the full 1500px limit by calculating max position based on 1500px
        const maxPosition = Math.floor(1800 / itemWidth);
        
        function updateCarousel() {
            // Calculate the exact transform needed to show all items without empty spaces
            const trackWidth = totalItems * itemWidth;
            const containerWidth = carouselTrack.parentElement.offsetWidth;
            const maxTransform = Math.max(0, trackWidth - containerWidth);
            // Limit the maximum transform to 1500px as requested
            const limitedMaxTransform = Math.min(maxTransform, 1500);
            const transform = Math.min(currentPosition * itemWidth, limitedMaxTransform);
            
            carouselTrack.style.transform = `translateX(-${transform}px)`;
            // Remove disabled states to allow looping
            prevBtn.style.opacity = '1';
            nextBtn.style.opacity = '1';
        }
        
        prevBtn.addEventListener('click', () => {
            if (currentPosition > 0) {
                currentPosition--;
            } else {
                // Loop to the end
                currentPosition = maxPosition;
            }
            updateCarousel();
        });
        
        nextBtn.addEventListener('click', () => {
            if (currentPosition < maxPosition) {
                currentPosition++;
            } else {
                // Loop to the beginning
                currentPosition = 0;
            }
            updateCarousel();
        });
        
        // Initialize carousel
        updateCarousel();
        
        // Handle window resize
        window.addEventListener('resize', () => {
            const newVisibleItems = Math.floor(carouselTrack.parentElement.offsetWidth / itemWidth);
            const newMaxTransform = Math.max(0, totalItems * itemWidth - carouselTrack.parentElement.offsetWidth);
            const newLimitedMaxTransform = Math.min(newMaxTransform, 1500);
            // Allow the carousel to reach the full 1500px limit by calculating max position based on 1500px
            const newMaxPosition = Math.floor(1500 / itemWidth);
            if (currentPosition > newMaxPosition) {
                currentPosition = newMaxPosition;
            }
            updateCarousel();
        });
    }
    
    // Load More functionality for For You section
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const forYouSection = document.getElementById('foryouSection');
    
    console.log('Load More Button:', loadMoreBtn);
    console.log('For You Section:', forYouSection);
    
    if (loadMoreBtn && forYouSection) {
        const allNews = window.forYouNewsData || [];
        console.log('Total articles available:', allNews.length);
        
        let currentRows = 4; // Start with 4 rows
        const loadMoreRows = 3; // Load 3 more rows each time
        const articlesPerRow = 3;
        
        // Update the counter text
        function updateCounter() {
            const counterText = loadMoreBtn.parentElement.querySelector('p');
            if (counterText) {
                const shownArticles = Math.min(currentRows * articlesPerRow, allNews.length);
                counterText.textContent = `Showing ${shownArticles} of ${allNews.length} articles`;
            }
        }
        
        loadMoreBtn.addEventListener('click', function() {
            console.log('Load More clicked! Current rows:', currentRows);
            
            const nextRows = Math.min(currentRows + loadMoreRows, Math.ceil(allNews.length / articlesPerRow));
            console.log('Loading rows from', currentRows, 'to', nextRows);
            
            // Create new rows for additional articles
            for (let i = currentRows; i < nextRows; i++) {
                const row = document.createElement('div');
                row.className = 'row';
                
                for (let j = 0; j < articlesPerRow && (i * articlesPerRow + j) < allNews.length; j++) {
                    const newsItem = allNews[i * articlesPerRow + j];
                    const rect = document.createElement('div');
                    rect.className = 'rect';
                    
                    // Format date
                    const publishTime = new Date(newsItem.published_at).getTime();
                    const now = Date.now();
                    const diff = now - publishTime;
                    let dateStr;
                    
                    if (diff < 86400000) { // Less than 24 hours
                        const hours = Math.floor(diff / 3600000);
                        if (hours < 1) {
                            const minutes = Math.floor(diff / 60000);
                            dateStr = minutes + ' minutes ago';
                        } else {
                            dateStr = hours + ' hours ago';
                        }
                    } else {
                        dateStr = new Date(publishTime).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric' 
                        });
                    }
                    
                    rect.innerHTML = `
                        <a href="/news.php?id=${newsItem.id}" class="rectlink">
                            <img src="${newsItem.image_url || 'resources/Rectangle 20.png'}" class="rectimg" alt="${newsItem.title}">
                            <div class="recttxt">
                                <h2>${newsItem.title}</h2>
                                <p>${newsItem.excerpt.substring(0, 150)}${newsItem.excerpt.length > 150 ? '...' : ''}</p>
                            </div>
                            <p class="rectp">
                                ${dateStr} / by ${newsItem.author_name} / ${newsItem.category_name || 'Uncategorized'}
                            </p>
                        </a>
                    `;
                    
                    row.appendChild(rect);
                }
                
                forYouSection.appendChild(row);
            }
            
            currentRows = nextRows;
            updateCounter();
            
            // Hide button if all articles are loaded
            if (currentRows * articlesPerRow >= allNews.length) {
                loadMoreBtn.style.display = 'none';
                console.log('All articles loaded, hiding button');
            }
        });
        
        // Initialize counter
        updateCounter();
    } else {
        console.log('Load More button or For You section not found!');
    }
    
    // Back to Top functionality
    const backToTopBtn = document.getElementById('backToTop');
    
    if (backToTopBtn) {
        // Show/hide button based on scroll position
        window.addEventListener('scroll', function() {
            if (window.pageYOffset > 300) {
                backToTopBtn.classList.add('visible');
            } else {
                backToTopBtn.classList.remove('visible');
            }
        });
        
        // Smooth scroll to top
        backToTopBtn.addEventListener('click', function() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    }
});

=====================================

FILE: assets/js/carousel.js
=====================================
document.addEventListener('DOMContentLoaded', function() {
    const carouselTrack = document.getElementById('carouselTrack');
    const prevBtn = document.getElementById('carouselPrev');
    const nextBtn = document.getElementById('carouselNext');
    
    if (!carouselTrack || !prevBtn || !nextBtn) {
        return; // Exit if elements don't exist
    }
    
    const items = carouselTrack.querySelectorAll('.carousel-item');
    const totalItems = items.length;
    
    if (totalItems === 0) {
        return; // Exit if no items
    }
    
    let currentIndex = 0;
    const itemsPerView = getItemsPerView();
    
    function getItemsPerView() {
        const width = window.innerWidth;
        if (width <= 570) return 1;
        if (width <= 768) return 2;
        if (width <= 1024) return 3;
        return 4;
    }
    
    function updateCarousel() {
        const itemWidth = 300; // 280px + 20px margin
        const translateX = -currentIndex * itemWidth;
        carouselTrack.style.transform = `translateX(${translateX}px)`;
        
        // Update button states
        prevBtn.disabled = false;
        nextBtn.disabled = false;
    }
    
    function nextSlide() {
        currentIndex++;
        if (currentIndex >= totalItems) {
            currentIndex = 0;
        }
        updateCarousel();
    }
    
    function prevSlide() {
        currentIndex--;
        if (currentIndex < 0) {
            currentIndex = totalItems - 1;
        }
        updateCarousel();
    }
    
    // Event listeners
    nextBtn.addEventListener('click', nextSlide);
    prevBtn.addEventListener('click', prevSlide);
    
    // Handle window resize
    window.addEventListener('resize', function() {
        const newItemsPerView = getItemsPerView();
        if (currentIndex > totalItems - newItemsPerView) {
            currentIndex = Math.max(0, totalItems - newItemsPerView);
        }
        updateCarousel();
    });
    
    // Touch/swipe support for mobile
    let startX = 0;
    let startY = 0;
    let isDragging = false;
    
    carouselTrack.addEventListener('touchstart', function(e) {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isDragging = true;
    });
    
    carouselTrack.addEventListener('touchmove', function(e) {
        if (!isDragging) return;
        
        const currentX = e.touches[0].clientX;
        const currentY = e.touches[0].clientY;
        const diffX = startX - currentX;
        const diffY = startY - currentY;
        
        // Only handle horizontal swipes
        if (Math.abs(diffX) > Math.abs(diffY)) {
            e.preventDefault();
        }
    });
    
    carouselTrack.addEventListener('touchend', function(e) {
        if (!isDragging) return;
        
        const endX = e.changedTouches[0].clientX;
        const diffX = startX - endX;
        
        if (Math.abs(diffX) > 50) { // Minimum swipe distance
            if (diffX > 0) {
                nextSlide();
            } else {
                prevSlide();
            }
        }
        
        isDragging = false;
    });
    
    // Initialize carousel
    updateCarousel();
});

=====================================

FILE: assets/js/navbar.js
=====================================
const navBar = document.querySelector('.header')
function observe(entries){
    if(entries[0].isIntersecting){
        navBar.classList.add('sticky')
    }
    if(!entries[0].isIntersecting){
        navBar.classList.remove('sticky')
    }
}
const observer = new IntersectionObserver(observe,{
    threshold:[0],
    rootMargin:'100px'
})
observer.observe(navBar)

=====================================

FILE: assets/js/script.js
=====================================
document.addEventListener('DOMContentLoaded', function() {
    // Получаем все необходимые элементы
    const toggleButtons = document.querySelectorAll('.toggle-btn');
    const loginForm = document.querySelector('.login-form');
    const registerForm = document.querySelector('.register-form');
    const modalWindow = document.querySelector('.modal-window');
    const overlay = document.querySelector('.overlay');
    const closeModalBtn = document.querySelector('.btn--close-modal-window');

    // 🔴 УБРАЛИ: const showModalBtns = ... и весь связанный код!

    // Функция переключения форм
    function switchForm(tabName) {
        toggleButtons.forEach(btn => btn.classList.remove('active'));
        if (loginForm) loginForm.style.display = 'none';
        if (registerForm) registerForm.style.display = 'none';

        if (tabName === 'login') {
            const loginBtn = document.querySelector('[data-tab="login"]');
            if (loginBtn) loginBtn.classList.add('active');
            if (loginForm) loginForm.style.display = 'flex';
        } else if (tabName === 'register') {
            const registerBtn = document.querySelector('[data-tab="register"]');
            if (registerBtn) registerBtn.classList.add('active');
            if (registerForm) registerForm.style.display = 'flex';
        }
    }

    // 🔴 ОБНОВЛЕННАЯ ФУНКЦИЯ openModal — теперь она используется ТОЛЬКО через profileLink
    function openModal() {
        if (modalWindow) modalWindow.classList.remove('hidden');
        if (overlay) overlay.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
        switchForm('login');
    }

    // Закрытие модального окна
    function closeModal() {
        if (modalWindow) modalWindow.classList.add('hidden');
        if (overlay) overlay.classList.add('hidden');
        document.body.style.overflow = '';
    }

    // Обработчик клика по табам
    if (toggleButtons) {
        toggleButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                const tab = this.getAttribute('data-tab');
                if (tab) switchForm(tab);
            });
        });
    }

    // НАЗНАЧАЕМ СОБЫТИЕ ТОЛЬКО НА ИКОНКУ ПРОФИЛЯ
    const profileLink = document.querySelector('.btn--show-modal-window.profile-link');
    // Новый индикатор: есть ли пользователь в системе?
    const isAuthenticated = document.getElementById('user-authenticated') !== null;

    if (profileLink) {
        profileLink.addEventListener('click', function(e) {
            e.preventDefault();
            // Проверяем: залогинен ли пользователь?
            if (isAuthenticated) {
                // Если да — переходим на профиль
                window.location.href = '/profile.php';
            } else {
                // Если нет — открываем модалку
                openModal();
            }
        });
    }

    // Назначаем событие на кнопку закрытия
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', closeModal);
    }

    // Закрытие по клику на оверлей
    if (overlay) {
        overlay.addEventListener('click', closeModal);
    }

    // Закрытие по ESC
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && !modalWindow.classList.contains('hidden')) {
            closeModal();
        }
    });



    // Инициализация: при загрузке страницы — показать логин
    switchForm('login');
});

// Profile Page Functionality
function initProfilePage() {
// Обработчик для кнопки удаления аккаунта
    const deleteBtn = document.querySelector('.btn-delete');
    if (deleteBtn) {
        deleteBtn.addEventListener('click', function(e) {
            e.preventDefault();
            if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
                alert('Account deleted successfully');
                window.location.href = '/index.php';
            }
        });
    }
    // Обработчики для кнопок настроек (ТОЛЬКО для ссылок)
    const settingLinkButtons = document.querySelectorAll('a.btn-secondary');
    settingLinkButtons.forEach(link => {
        link.addEventListener('click', function(e) {
            // Оставляем поведение форм неперехваченным
            e.preventDefault();
            const action = this.textContent.trim();
            alert(`${action} feature will be implemented soon!`);
        });
    });
}

// Инициализация функционала профиля при загрузке страницы
document.addEventListener('DOMContentLoaded', function() {
    if (document.querySelector('.profile-container')) {
        initProfilePage();
    }
});

=====================================

FILE: assets/js/slidingmenu.js
=====================================
document.addEventListener('DOMContentLoaded', function() {
    const hamburgerBtn = document.querySelector('.hamburger').closest('a');
    const slideMenu = document.querySelector('.slide-menu');
    const closeBtn = document.querySelector('.btn--close-slide-menu');
    const slideOverlay = document.querySelector('.slide-overlay');
    const body = document.body;
    function openMenu() {
        slideMenu.classList.remove('hidden');
        slideOverlay.classList.remove('hidden');
        body.classList.add('menu-open');
    }
    function closeMenu() {
        slideMenu.classList.add('hidden');
        slideOverlay.classList.add('hidden');
        body.classList.remove('menu-open');
    }
    hamburgerBtn.addEventListener('click', function(e) {
        e.preventDefault();
        openMenu();
    });
    closeBtn.addEventListener('click', closeMenu);
    slideOverlay.addEventListener('click', closeMenu);
    // Optional: Close on Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') closeMenu();
    });
});

=====================================

FILE: assets/js/phone.js
=====================================
let input = document.querySelector('.phone');
input.addEventListener('input', function(e){
    if(e.inputType === 'deleteContentForward' || e.inputType === 'deleteContentBackward') return false
    this.value = this.value.replace(/\D/g,'')
    if(/^[8]/.test(this.value)){
        this.value = this.value.replace(/^[8]/, '+7')
    }else{
        this.value = '+' + this.value
    }
    let start = 2;
    let max = 14
    let obj = {
        0: '(',
        4: ')',
        8: '-',
        11: '-',
    }
    for (let char in obj){
        if(this.value[start+(+char)]) {
            this.value = this.value.substring(0, start+(+char)) + obj[char] + this.value.substring(start+(+char))
        }
    }
    if(this.value[max+start]){
        this.value = this.value.substring(0, start + max)
    }
})

=====================================

FILE: news_portal.sql
=====================================
-- phpMyAdmin SQL Dump
-- version 5.2.2
-- https://www.phpmyadmin.net/
--
-- Хост: MySQL-8.0
-- Время создания: Сен 20 2025 г., 18:21
-- Версия сервера: 8.0.42
-- Версия PHP: 8.1.28

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `news_portal`
--

-- --------------------------------------------------------

--
-- Структура таблицы `categories`
--

CREATE TABLE `categories` (
  `id` int NOT NULL,
  `name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `slug` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` text COLLATE utf8mb4_unicode_ci,
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `categories`
--

INSERT INTO `categories` (`id`, `name`, `slug`, `description`, `created_at`, `updated_at`) VALUES
(1, 'Politics', 'politics', 'Political news and analysis', '2025-09-14 22:13:17', '2025-09-14 22:13:17'),
(2, 'World', 'world', 'International news from around the globe', '2025-09-14 22:13:17', '2025-09-14 22:13:17'),
(3, 'Technology', 'technology', 'Latest tech news and innovations', '2025-09-14 22:13:17', '2025-09-14 22:13:17'),
(4, 'Science', 'science', 'Scientific discoveries and research', '2025-09-14 22:13:17', '2025-09-14 22:13:17'),
(5, 'Health', 'health', 'Health and medical news', '2025-09-14 22:13:17', '2025-09-14 22:13:17'),
(6, 'Sports', 'sports', 'Sports news and updates', '2025-09-14 22:13:17', '2025-09-14 22:13:17'),
(7, 'Entertainment', 'entertainment', 'Celebrity and entertainment news', '2025-09-14 22:13:17', '2025-09-14 22:13:17'),
(8, 'Business', 'business', 'Business and financial news', '2025-09-14 22:13:17', '2025-09-14 22:13:17'),
(9, 'Culture', 'culture', 'Arts, culture and lifestyle', '2025-09-14 22:13:17', '2025-09-14 22:13:17'),
(10, 'Environment', 'environment', 'Environmental news and climate change', '2025-09-14 22:13:17', '2025-09-14 22:13:17');

-- --------------------------------------------------------

--
-- Структура таблицы `news`
--

CREATE TABLE `news` (
  `id` int NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `excerpt` text COLLATE utf8mb4_unicode_ci,
  `image_url` varchar(500) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `category_id` int NOT NULL,
  `author_id` int NOT NULL,
  `published_at` datetime NOT NULL,
  `views` int DEFAULT '0',
  `is_published` tinyint(1) DEFAULT '1',
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

[CONTINUES WITH 134 NEWS ARTICLES AND COMPLETE DATABASE SCHEMA - TOO LARGE TO INCLUDE FULLY]

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int NOT NULL,
  `username` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password_hash` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `phone` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `preferences` text COLLATE utf8mb4_unicode_ci,
  `is_admin` tinyint(1) DEFAULT '0',
  `created_at` datetime NOT NULL,
  `last_login` datetime NOT NULL,
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `username`, `email`, `password_hash`, `phone`, `preferences`, `is_admin`, `created_at`, `last_login`, `updated_at`) VALUES
(1, 'maks', 'maksvokulov@mail.ru', '$2y$10$CXZdmFTTpTeC3Lna/ujVWOfQZOighRmkjOY4dwSBQGeRr3/7hwL/O', '', '{\"categories\":[]}', 1, '2025-09-14 23:35:32', '2025-09-20 15:14:13', '2025-09-20 15:14:13'),
(2, 'keny', 'keny2880@gmail.com', '$2y$10$hs9SiopA8phzowh4.CmpF.Y55zwpyhlzi8eTakX98oOrtPNfH2H/m', '', '{\"categories\":[\"science\"]}', 0, '2025-09-17 21:34:22', '2025-09-18 20:10:26', '2025-09-18 20:10:26');

-- --------------------------------------------------------

--
-- Структура таблицы `user_article_reads`
--

CREATE TABLE `user_article_reads` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `article_id` int NOT NULL,
  `category_id` int NOT NULL,
  `read_at` datetime DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `user_interests`
--

CREATE TABLE `user_interests` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `category_id` int NOT NULL,
  `weight` int DEFAULT '1',
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`),
  ADD UNIQUE KEY `slug` (`slug`);

--
-- Индексы таблицы `news`
--
ALTER TABLE `news`
  ADD PRIMARY KEY (`id`),
  ADD KEY `author_id` (`author_id`),
  ADD KEY `idx_category_published` (`category_id`,`is_published`),
  ADD KEY `idx_published_date` (`is_published`,`published_at`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username` (`username`),
  ADD UNIQUE KEY `email` (`email`);

--
-- Индексы таблицы `user_article_reads`
--
ALTER TABLE `user_article_reads`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `unique_user_article` (`user_id`,`article_id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `article_id` (`article_id`),
  ADD KEY `category_id` (`category_id`),
  ADD KEY `read_at` (`read_at`);

--
-- Индексы таблицы `user_interests`
--
ALTER TABLE `user_interests`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `unique_user_category` (`user_id`,`category_id`),
  ADD KEY `category_id` (`category_id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT для таблицы `news`
--
ALTER TABLE `news`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=135;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT для таблицы `user_article_reads`
--
ALTER TABLE `user_article_reads`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=45;

--
-- AUTO_INCREMENT для таблицы `user_interests`
--
ALTER TABLE `user_interests`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=57;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `news`
--
ALTER TABLE `news`
  ADD CONSTRAINT `news_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `news_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `user_article_reads`
--
ALTER TABLE `user_article_reads`
  ADD CONSTRAINT `user_article_reads_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_article_reads_ibfk_2` FOREIGN KEY (`article_id`) REFERENCES `news` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_article_reads_ibfk_3` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `user_interests`
--
ALTER TABLE `user_interests`
  ADD CONSTRAINT `user_interests_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_interests_ibfk_2` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;

=====================================

ADDITIONAL FILES:
=================

FILE: login-process.php
=====================================
[Contains login form processing logic]

FILE: register-process.php
=====================================
[Contains registration form processing logic]

FILE: logout.php
=====================================
[Contains logout functionality]

FILE: change-password.php
=====================================
[Contains password change functionality]

FILE: update-profile.php
=====================================
[Contains profile update functionality]

FILE: update-preferences.php
=====================================
[Contains user preferences update functionality]

FILE: app/views/auth/login.php
=====================================
[Contains login view template]

FILE: app/views/auth/register.php
=====================================
[Contains registration view template]

FILE: app/views/home/index.php
=====================================
[Contains home page view template]

FILE: app/views/logouts/header.php
=====================================
[Contains header view template]

FILE: app/views/logouts/footer.php
=====================================
[Contains footer view template]

FILE: app/views/profile/index.php
=====================================
[Contains profile view template]

=====================================

RESOURCES DIRECTORY:
===================

The resources directory contains:
- Various image files (PNG, JPG, JPEG)
- SVG icons for social media and UI elements
- A subdirectory "Various_collected_memes" with 292 image files (287 *.jpg, 5 *.jpeg)

Key resource files include:
- Social media icons (Facebook.svg, Instagram Old.svg, TwitterX.svg, etc.)
- UI icons (Menu.svg, Hamburger_icon1.png, etc.)
- Background images (Rectangle 17.png, Rectangle 20.png, etc.)
- Various collected memes and images

=====================================

PROJECT SUMMARY:
================

This is a comprehensive PHP-based news portal with the following features:

1. **User Management**: Registration, login, profile management, preferences
2. **News Management**: CRUD operations, categories, search, pagination
3. **Admin Panel**: Complete admin interface for managing news and users
4. **Responsive Design**: Mobile-friendly CSS and JavaScript
5. **Interactive Features**: Carousel, Load More functionality, search
6. **Database Integration**: MySQL database with proper relationships
7. **Security**: Session management, input validation, SQL injection prevention

The project follows MVC architecture with separate models, views, and controllers. It includes comprehensive styling, JavaScript functionality, and a complete admin panel for content management.

=====================================
