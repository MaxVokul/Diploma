<?php
session_start();
require_once '../app/core/Database.php';
require_once '../app/models/UserModel.php';

// Check authorization and admin rights
if (!isset($_SESSION['user_id'])) {
    header('Location: /index.php');
    exit();
}

$userModel = new UserModel();
if (!$userModel->isAdmin($_SESSION['user_id'])) {
    header('Location: /profile.php');
    exit();
}

// –§—É–Ω–∫—Ü–∏—è –±—ç–∫–∞–ø–∞
function createBackup() {
    try {
        $backupDir = __DIR__ . '/../backups/';

        // Create backups directory if not exists
        if (!is_dir($backupDir)) {
            mkdir($backupDir, 0755, true);
        }

        $backupFile = $backupDir . 'backup_' . date('Y-m-d_H-i-s') . '.sql';
        $db = Database::getInstance()->getConnection();

        $backupContent = "-- MySQL Backup\n";
        $backupContent .= "-- Created: " . date('Y-m-d H:i:s') . "\n\n";

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        $tables = $db->query("SHOW TABLES")->fetchAll(PDO::FETCH_COLUMN);

        foreach ($tables as $table) {
            // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
            $backupContent .= "--\n-- Table structure for `$table`\n--\n";
            $createTable = $db->query("SHOW CREATE TABLE `$table`")->fetch(PDO::FETCH_ASSOC);
            $backupContent .= $createTable['Create Table'] . ";\n\n";

            // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            $backupContent .= "--\n-- Data for `$table`\n--\n";
            $rows = $db->query("SELECT * FROM `$table`")->fetchAll(PDO::FETCH_ASSOC);

            foreach ($rows as $row) {
                $columns = [];
                $values = [];

                foreach ($row as $column => $value) {
                    $columns[] = "`$column`";
                    if ($value === null) {
                        $values[] = 'NULL';
                    } else {
                        $values[] = "'" . addslashes($value) . "'";
                    }
                }

                $backupContent .= "INSERT INTO `$table` (" . implode(', ', $columns) . ") VALUES (" . implode(', ', $values) . ");\n";
            }
            $backupContent .= "\n";
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        if (file_put_contents($backupFile, $backupContent)) {
            return true;
        }

        return false;

    } catch (Exception $e) {
        error_log("Backup error: " . $e->getMessage());
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞
function deleteBackup($fileName) {
    $backupDir = __DIR__ . '/../backups/';
    $filePath = $backupDir . $fileName;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ SQL —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
    if (file_exists($filePath) && pathinfo($filePath, PATHINFO_EXTENSION) === 'sql' && strpos($fileName, 'backup_') === 0) {
        return unlink($filePath);
    }
    return false;
}

// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ë–≠–ö–ê–ü –ü–†–ò –ó–ê–•–û–î–ï –ù–ê –°–¢–†–ê–ù–ò–¶–£ (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
$backupFlagFile = __DIR__ . '/../backups/last_backup.date';
$today = date('Y-m-d');

$autoBackupMessage = '';
$manualMessage = '';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–ª–∞–ª–∏ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –±—ç–∫–∞–ø
if (!file_exists($backupFlagFile) || file_get_contents($backupFlagFile) !== $today) {
    if (createBackup()) {
        file_put_contents($backupFlagFile, $today);
        $autoBackupMessage = "‚úÖ Automatic backup created for today (" . $today . ")";
    } else {
        $autoBackupMessage = "‚ùå Automatic backup failed";
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–±–æ–ª—å—à–µ 7 –¥–Ω–µ–π)
function cleanOldBackups() {
    $backupDir = __DIR__ . '/../backups/';
    if (!is_dir($backupDir)) return;

    $files = glob($backupDir . 'backup_*.sql');
    $keepTime = strtotime('-7 days');

    foreach ($files as $file) {
        if (filemtime($file) < $keepTime) {
            unlink($file);
        }
    }
}

cleanOldBackups();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
if ($_POST) {
    // –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
    if (isset($_POST['create_backup'])) {
        if (createBackup()) {
            file_put_contents($backupFlagFile, $today); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
            $manualMessage = "‚úÖ Manual backup created successfully!";
        } else {
            $manualMessage = "‚ùå Failed to create backup";
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞
    if (isset($_POST['delete_backup'])) {
        $fileName = $_POST['file_name'] ?? '';
        if ($fileName && deleteBackup($fileName)) {
            $manualMessage = "‚úÖ Backup '$fileName' deleted successfully!";
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —ç—Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            header("Location: " . $_SERVER['PHP_SELF']);
            exit();
        } else {
            $manualMessage = "‚ùå Failed to delete backup";
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤
function getBackups() {
    $backupDir = __DIR__ . '/../backups/';
    if (!is_dir($backupDir)) return [];

    $files = glob($backupDir . 'backup_*.sql');
    $backups = [];

    foreach ($files as $file) {
        if (filesize($file) > 0) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
            $backups[] = [
                'name' => basename($file),
                'size' => round(filesize($file) / 1024, 2) . ' KB',
                'date' => date('Y-m-d H:i:s', filemtime($file))
            ];
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    usort($backups, function($a, $b) {
        return strtotime($b['date']) - strtotime($a['date']);
    });

    return $backups;
}

$backups = getBackups();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Backup - NEWS</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/assets/css/main.css">
</head>
<body>
<?php include '../header.php'; ?>

<div class="admin-container">
    <aside class="admin-sidebar">
        <h2>Admin Panel</h2>
        <nav>
            <ul>
                <li><a href="/admin/">Dashboard</a></li>
                <li><a href="/admin/news/manage.php">Manage News</a></li>
                <li><a href="/admin/news/create.php">Create News</a></li>
                <li><a href="/admin/backup.php">Backup</a></li>
                <li><a href="/app/controller/logout.php">Logout</a></li>
            </ul>
        </nav>
    </aside>

    <main class="admin-main">
        <h1>Database Backup</h1>

        <!-- –ê–≤—Ç–æ-–±—ç–∫–∞–ø —Å–æ–æ–±—â–µ–Ω–∏–µ -->
        <?php if (!empty($autoBackupMessage)): ?>
            <div class="message <?php echo strpos($autoBackupMessage, '‚úÖ') !== false ? 'success' : 'error'; ?>">
                <?php echo $autoBackupMessage; ?>
            </div>
        <?php endif; ?>

        <!-- –†—É—á–Ω–æ–π –±—ç–∫–∞–ø —Å–æ–æ–±—â–µ–Ω–∏–µ -->
        <?php if (!empty($manualMessage)): ?>
            <div class="message <?php echo strpos($manualMessage, '‚úÖ') !== false ? 'success' : 'error'; ?>">
                <?php echo $manualMessage; ?>
            </div>
        <?php endif; ?>

        <!-- –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ -->
        <div style="background: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px;">
            <h3>üì¶ Quick Backup</h3>
            <form method="POST">
                <button type="submit" name="create_backup" class="btn btn-primary">
                    Create Backup Now
                </button>
            </form>
            <p><small>Automatic backup created daily when you visit this page</small></p>
        </div>

        <!-- –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ -->
        <div style="background: #f8f9fa; padding: 20px; border-radius: 5px;">
            <h3>üìã Backup Files</h3>

            <?php if (empty($backups)): ?>
                <p>No backups yet. Create your first backup above.</p>
            <?php else: ?>
                <p>Found <?php echo count($backups); ?> backup file(s)</p>

                <?php foreach ($backups as $backup): ?>
                    <div class="backup-item">
                        <div class="backup-info">
                            <strong><?php echo $backup['name']; ?></strong><br>
                            <small>Size: <?php echo $backup['size']; ?> | Date: <?php echo $backup['date']; ?></small>
                        </div>
                        <div class="backup-actions">
                            <a href="/admin/download-backup.php?file=<?php echo urlencode($backup['name']); ?>"
                               class="btn btn-download">
                                Download
                            </a>
                            <form method="POST" style="display: inline;">
                                <input type="hidden" name="file_name" value="<?php echo $backup['name']; ?>">
                                <button type="submit" name="delete_backup" class="btn btn-delete"
                                        onclick="return confirm('Are you sure you want to delete backup <?php echo $backup['name']; ?>?')">
                                    Delete
                                </button>
                            </form>
                        </div>
                    </div>
                <?php endforeach; ?>
            <?php endif; ?>
        </div>
    </main>
</div>

<?php include '../footer.php'; ?>
</body>
</html>